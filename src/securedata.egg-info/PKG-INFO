Metadata-Version: 2.1
Name: securedata
Version: 2022.1.9.2
Summary: Easily manage data storage and logging across repos
Home-page: https://github.com/tylerjwoodfin/securedata
Author: Tyler Woodfin
Author-email: tyler@tylerwoodfin.com
License: : OSI Approved :: MIT License
Platform: UNKNOWN
Requires-Python: >=3.6
Description-Content-Type: text/markdown
License-File: LICENSE.md

# SecureData
A library that allows for easy reading/writing of settings across repositories, as well as logging.

## Author
- Tyler Woodfin
    - [GitHub](https://www.github.com/tylerjwoodfin)
    - [Website](http://tyler.cloud)

## Disclaimers
- This is an early stage project. There are still some things to tweak, and although I've done quite a bit of testing, I can't guarantee everything that works on my machine will work on yours. Always back up your data to multiple places to avoid data loss.
- If you find any issues, please contact me... or get your hands dirty and raise a PR!

## Structure

- Data is stored in `settings.json` (in `~/securedata` by default)
- Logs are written to `~/securedata/log` by default

## Installation

```bash
  python3 -m pip install securedata
```
## Configuration
- To choose where `settings.json` is stored, use
```
securedata config
```

- To choose where logs will be stored, edit `settings.json` and set `path_log` to the full path to the log folder.

## Examples

### `setItem`
```
from securedata import securedata

securedata.setItem("employee", "Tyler", "salary", 7.25)
```

results in this structure in settings.json:

```
{
    "employee": {
        "Tyler": {
            "salary": 7.25
        }
    }
}
```

### `getItem`
```
from securedata import securedata

print(securedata.getItem("employee", "Tyler", "salary")) # given example settings.json above
```

```
> python3 test.py
> 7.25
```

### `log`
```
from securedata import securedata

# writes to a file named LOG_DAILY YYYY-MM-DD in the default log folder (or securedata.getItem('path_log')) inside a YYYY-MM-DD folder
securedata.log("Dear Diary...")
securedata.log("This function hit a breakpoint", level="debug")
securedata.log("Looks like the server is on fire", level="critical")
securedata.log("This is fine", level="info")

# writes to a file named LOG_TEMPERATURE
securedata.log("30", logName="LOG_TEMPERATURE")

# writes to a file named LOG_TEMPERATURE in /home/pi/weather
securedata.log("30", logName="LOG_TEMPERATURE", filePath="/home/pi/weather")

    # format
    # 2021-12-29 19:29:27,896 — INFO — 30

```

## Dependencies
- Python >= 3.6
- [Rclone](https://rclone.org)
    - optional, used to sync data to/from cloud providers
    - support for customizing this with `securedata.config` in a future update

